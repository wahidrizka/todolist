name: Deploy to VM

on:
    # deploy otomatis saat rilis dipublish
    release:
        types: [ published ]
    # atau setelah job publish image rilis sukses
    workflow_run:
        workflows: [ "Publish Release image (GHCR)" ]
        types: [ completed ]
    # tombol manual
    workflow_dispatch:
        inputs:
            tag:
                description: "Image tag to deploy (e.g. v0.3.2 or latest)"
                required: false
                type: string

permissions:
    contents: read
    packages: read

jobs:
    deploy:
        if: >
            github.event_name == 'release' ||
            (github.event_name == 'workflow_run' && github.event.workflow_run.conclusion == 'success') ||
            github.event_name == 'workflow_dispatch'
        runs-on: ubuntu-latest
        steps:
            -   name: Resolve image to deploy
                id: img
                env:
                    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                shell: bash
                run: |
                    REPO="ghcr.io/${{ github.repository }}"
                    case "${{ github.event_name }}" in
                      release)
                        TAG="${{ github.event.release.tag_name }}"
                        ;;
                      workflow_dispatch)
                        TAG="${{ inputs.tag }}"
                        ;;
                      workflow_run)
                        # ambil tag rilis terbaru
                        TAG="$(gh release view --repo "$GITHUB_REPOSITORY" --json tagName -q .tagName)"
                        ;;
                    esac
                    TAG="${TAG#refs/tags/}"
                    if [ -z "$TAG" ]; then
                      echo "ERROR: tag rilis tidak ditemukan. Beri input 'tag' saat manual." >&2
                      exit 1
                    fi
                    echo "image=${REPO}:${TAG}" >> "$GITHUB_OUTPUT"

            -   name: Deploy over SSH
                uses: appleboy/ssh-action@v1
                with:
                    host: ${{ secrets.DEPLOY_HOST }}
                    username: ${{ secrets.DEPLOY_USER }}
                    key: ${{ secrets.SSH_PRIVATE_KEY }}
                    timeout: "30m"
                    script: |
                        echo "Deploying IMAGE=${{ steps.img.outputs.image }}"
                        IMAGE="${{ steps.img.outputs.image }}" NAME="todolist" PORT="8080" bash /opt/todolist/deploy.sh
