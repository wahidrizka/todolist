name: Deploy to VM

on:
    # HANYA jalan setelah image berhasil dipublish
    workflow_run:
        workflows: [ "Publish Release image (GHCR)" ]
        types: [ completed ]

    # Opsional: manual deploy / rollback
    workflow_dispatch:
        inputs:
            tag:
                description: "Image tag to deploy (e.g. v0.4.1 or latest)"
                required: false
                type: string

permissions:
    contents: read
    packages: read

concurrency:
    group: deploy-prod
    cancel-in-progress: false

jobs:
    deploy:
        # Jalan kalau manual, atau kalau publish-image SUKSES
        if: >
            ${{
              github.event_name == 'workflow_dispatch' ||
              (github.event_name == 'workflow_run' &&
               github.event.workflow_run.conclusion == 'success')
            }}
        runs-on: ubuntu-latest

        steps:
            -   name: Resolve image to deploy
                id: img
                env:
                    GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                shell: bash
                run: |
                    set -euo pipefail
                    REPO="ghcr.io/${{ github.repository }}"

                    if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ -n "${{ inputs.tag }}" ]; then
                      TAG="${{ inputs.tag }}"
                    else
                      # Ambil tag rilis TERBARU (yang barusan publish-image sukses)
                      TAG="$(gh release view --repo "${{ github.repository }}" --json tagName -q .tagName)"
                    fi

                    TAG="${TAG#refs/tags/}"
                    TAG="${TAG#v}"

                    if [ -z "${TAG}" ]; then
                      echo "Gagal menentukan TAG rilis." >&2
                      exit 1
                    fi

                    echo "image=${REPO}:${TAG}" >> "$GITHUB_OUTPUT"
                    echo "Will deploy ${REPO}:${TAG}"

            -   name: Deploy over SSH
                uses: appleboy/ssh-action@v1
                with:
                    host: ${{ secrets.DEPLOY_HOST }}
                    username: ${{ secrets.DEPLOY_USER }}
                    key: ${{ secrets.SSH_PRIVATE_KEY }}
                    command_timeout: 30m
                    script: |
                        IMG="${{ steps.img.outputs.image }}"
                        echo "Deploying IMAGE=$IMG"
                        IMAGE="$IMG" NAME="todolist" PORT="8080" bash /opt/todolist/deploy.sh
